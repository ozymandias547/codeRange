[{
	"name": "Sleep In",
	"category": "warmup",
	"definition": "The parameter weekday is true if it is a weekday, and the parameter vacation is true if we are on vacation. We sleep in if it is not a weekday or we're on vacation. Return true if we sleep in. ",
	"function": "sleepIn",
	"functionDefinition": "function sleepIn(weekday, vacation) {\n\n}",
	"tests": [{
		"definition": "sleepIn(false, false)",
		"params": [false, false],
		"result": true
	}, {
		"definition": "sleepIn(true, false)",
		"params": [true, false],
		"result": false
	}, {
		"definition": "sleepIn(false, true)",
		"params": [false, true],
		"result": true
	}, {
		"definition": "sleepIn(true, true)",
		"params": [true, true],
		"result": true
	}]
}, {
	"name": "factorial",
	"category": "recursion",
	"definition": "Given n of 1 or more, return the factorial of n, which is n * (n-1) * (n-2) ... 1. Compute the result recursively (without loops). ",
	"function": "factorial",
	"functionDefinition": "function factorial(n) {\n\n}",
	"tests": [{
		"definition": "factorial(1)",
		"params": [1],
		"result": 1
	}, {
		"definition": "factorial(2)",
		"params": [3],
		"result": 6
	},
	{
		"definition": "factorial(8)",
		"params": [8],
		"result": 40320
	}]

}, {
	"name": "monkeyTrouble",
	"category": "warmup",
	"definition": "We have two monkeys, a and b, and the parameters aSmile and bSmile indicate if each is smiling. We are in trouble if they are both smiling or if neither of them is smiling. Return true if we are in trouble. ",
	"function": "monkeyTrouble",
	"functionDefinition": "function monkeyTrouble(aSmile, bSmile) {\n\n}",
	"tests": [{
		"definition": "monkeyTrouble(true, true)",
		"params": [true, true],
		"result": true
	}, {
		"definition": "monkeyTrouble(false, false)",
		"params": [false, false],
		"result": true
	}, {
		"definition": "monkeyTrouble(true, false)",
		"params": [true, false],
		"result": false
	}, {
		"definition": "monkeyTrouble(false, true)",
		"params": [false, true],
		"result": false
	}]
}, {
	"name": "countEvens",
	"category": "strings",
	"definition": "Return the number of even ints in the given array. Note: the % \"mod\" operator computes the remainder, e.g. 5 % 2 is 1. ",
	"function": "countEvens",
	"functionDefinition": "function countEvens(aNums) {\n\n}",
	"tests": [{
		"definition": "countEvens([2, 1, 2, 3, 4])",
		"params": [
			[2, 1, 2, 3, 4]
		],
		"result": 3
	}, {

		"definition": "countEvens([2, 2, 0])",
		"params": [
			[2, 2, 0]
		],
		"result": 3
	}, {

		"definition": "countEvens([1, 3, 5])",
		"params": [
			[1, 3, 5]
		],
		"result": 0
	}]
}]